<launch>
		<rosparam file="$(find balrog_sim)/param/ros.yaml"/>

		<arg name="world_file"  default="$(find balrog_sim)/world/test_area_tags.world"/>
		<param name="use_sim_time" value="true" />

	  <arg name="base"      value="kobuki"/> <!-- create, roomba -->
	  <arg name="battery"   value="/proc/acpi/battery/BAT0"/>  <!-- /proc/acpi/battery/BAT0 -->
	  <arg name="gui" default="true"/>
	  <arg name="stacks"    value="hexagons"/>  <!-- circles, hexagons -->
	  <arg name="3d_sensor" value="astra"/>  <!-- kinect, asus_xtion_pro -->
	  <arg name="scan_topic"  default="scan" />
	  <arg name="base_frame"  default="base_footprint"/>
	  <arg name="odom_frame"  default="odom"/>

	  <param name="/use_sim_time" value="true"/>

	  <include file="$(find gazebo_ros)/launch/empty_world.launch">
	    <arg name="use_sim_time" value="true"/>
	    <arg name="debug" value="false"/>
	    <arg name="gui" value="$(arg gui)" />
	    <arg name="world_name" value="$(arg world_file)"/>
	  </include>

		<arg name="urdf_file" default="$(find xacro)/xacro.py '$(find balrog_sim)/robots/asl_turtlebot_custom_lidar.urdf.xacro'" />
		<param name="robot_description" command="$(arg urdf_file)" />

		<!-- Gazebo model spawner -->
		<node name="spawn_turtlebot_model" pkg="gazebo_ros" type="spawn_model"
					args="-x '0.0' -y '0.0' -Y '0.0' -unpause -urdf -param robot_description -model mobile_base"/>

	  <!-- Velocity muxer -->
	  <node pkg="nodelet" type="nodelet" name="mobile_base_nodelet_manager" args="manager"/>
	  <node pkg="nodelet" type="nodelet" name="cmd_vel_mux"
	        args="load yocs_cmd_vel_mux/CmdVelMuxNodelet mobile_base_nodelet_manager">
	      <param name="yaml_cfg_file" value="$(find turtlebot_bringup)/param/mux.yaml" />
	      <remap from="cmd_vel_mux/output" to="mobile_base/commands/velocity"/>
	  </node>

	  <!-- Bumper/cliff to pointcloud (not working, as it needs sensors/core messages) -->
	  <include file="$(find turtlebot_bringup)/launch/includes/kobuki/bumper2pc.launch.xml"/>

	  <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher">
	      <param name="publish_frequency" type="double" value="30.0" />
	  </node>

		<!-- Start Mapper to genreate map from laser scans -->
		<node name="Mapper" pkg="nav2d_karto" type="mapper" output="screen" launch-prefix="gdb -ex run --args">
			<rosparam file="$(find balrog_sim)/param/mapper.yaml"/>
		</node>

		<node pkg="apriltags_ros" type="apriltag_detector_node" name="apriltag_detector" output="screen">
        <!-- Remap topic required by the node to custom topics -->
        <remap from="image_rect" to="/camera/rgb/image_raw" />
        <remap from="camera_info" to="/camera/rgb/camera_info" />

        <!-- Optional: Subscribe to the compressed stream-->
        <param name="image_transport" type="str" value="compressed" />

        <!-- Select the tag family: 16h5, 25h7, 25h9, 36h9, or 36h11(default) -->
        <param name="tag_family" type="str" value="36h11" />

        <!-- Enable projected optical measurements for more accurate tag transformations -->
        <!-- This exists for backwards compatability and should be left true for new setups -->
        <param name="projected_optics" type="bool" value="true" />

        <!-- Describe the tags -->
        <rosparam param="tag_descriptions">[{id: 0, size: 0.13, frame_id: tag_0},
                                            {id: 1, size: 0.13, frame_id: tag_1},
                                            {id: 2, size: 0.13, frame_id: tag_2},
                                            {id: 3, size: 0.13, frame_id: tag_3},
                                            {id: 4, size: 0.13, frame_id: tag_4},
                                            {id: 5, size: 0.13, frame_id: tag_5},
                                            {id: 6, size: 0.13, frame_id: tag_6},
                                            {id: 7, size: 0.13, frame_id: tag_7}]
        </rosparam>
    </node>

		<!-- needed to be able to lookup the transform to tags! -->
		<node pkg="tf" type="static_transform_publisher" name="camera_static_tf" args="0.0 0.0 .25 0.5 -0.5 0.5 -0.5 /base_footprint /camera_depth_optical_frame 100"/>

	  <node name="rviz" pkg="rviz" type="rviz" args="-d $(find balrog_sim)/rviz/OpenKarto.rviz"/>

	  <include file="$(find balrog_sim)/launch/manual_control.launch"></include>
</launch>
